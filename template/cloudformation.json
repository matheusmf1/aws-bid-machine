{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "This CloudFormation Template provides Big Machine Infra",
  
  "Parameters": {

    "StackName": {
      "Description": "The name of your stack to apply Tags",
      "Type": "String",
      "Default": "bid-machine-stack"
    },

    "BucketWebApplication": {
      "Description": "The S3 bucket name to store the web application",
      "Type": "String",
      "Default": "bid-machine-web-application"
    },

    "BucketData": {
      "Description": "The S3 bucket name to store all XML and its derived data",
      "Type": "String",
      "Default": "bid-machine-data"
    },

    "BucketLambdaCode": {
      "Description": "The S3 bucket name that is stored all Lambda functions",
      "Type": "String",
      "Default": "bid-machine-lambda-code"
    },

    "DynamoDBTableName": {
      "Description": "DynamoDB's table name",
      "Type": "String",
      "Default": "BidMachineItens2"
    }
    
  },
  
  "Resources": {

    "S3BucketWebApplication": {
      "Type": "AWS::S3::Bucket",
      
      "Properties": {
     
        "BucketName": { "Ref": "BucketWebApplication" },

        "Tags": [
          {
            "Key": { "Ref": "StackName" },
            "Value": { "Ref": "BucketWebApplication" }
          }
        ]
      }
    },

    "BucketWebApplicationPolicy": {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket" : { "Ref" : "BucketWebApplication" },
        "PolicyDocument": {
          "Id" : "MyPolicy",
          "Statement": [
            {
              "Sid" : "Grant a CloudFront Origin Identity access to support private content",
              "Effect" : "Allow",
              "Action" : [ "s3:GetObject" ],
              "Principal": {
                "AWS": { "Fn::Sub": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}" }
              },
              "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "BucketWebApplication" } , "/*" ] ] }
            }
          ]
        }
      }
    },


    "S3BucketData": {
      "Type": "AWS::S3::Bucket",

      "DependsOn": [ "S3InvokeLambdaPermissionXMLToJSON", "S3InvokeLambdaPermissionRefineData" ],
      "Properties": {
     
        "BucketName": { "Ref": "BucketData" },
        "Tags": [
          {
            "Key": { "Ref": "StackName" },
            "Value": { "Ref": "BucketData" }
          }
        ],

        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Event": "s3:ObjectCreated:*",
              "Filter": {
                "S3Key": {
                  "Rules": [
                    { 
                      "Name": "prefix",
                      "Value": "XML/"
                   }
                  ]
                }
              },
              "Function": { "Fn::GetAtt": [ "LambdaXMLToJSON", "Arn" ] }
            },
            {
              "Event": "s3:ObjectCreated:*",
              "Filter": {
                "S3Key": {
                  "Rules": [
                    { 
                      "Name": "prefix",
                      "Value": "JSON/"
                   }
                  ]
                }
              },
              "Function": { "Fn::GetAtt": [ "LambdaRefineData", "Arn" ] }
            }
          ]
        }
      }
    },

    "S3InvokeLambdaPermissionXMLToJSON": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "LambdaXMLToJSON" },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {"Ref": "AWS::AccountId"},
        "SourceArn": { "Fn::Sub": "arn:aws:s3:::${BucketData}" }
      }
    },

    "S3InvokeLambdaPermissionRefineData": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "LambdaRefineData" },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {"Ref": "AWS::AccountId"},
        "SourceArn": { "Fn::Sub": "arn:aws:s3:::${BucketData}" }
      }
    },

    "S3CustomResource": {
      "Type": "Custom::S3CustomResource",
      
      "Properties": {
        
        "ServiceToken": { "Fn::GetAtt" : [ "S3PutObjectFunction", "Arn"] },
        "the_bucket": { "Ref": "S3BucketData" },
        "dirs_to_create": "XML,JSON,refined_data"
      }
    },

    "S3PutObjectFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleBasicLambda", "S3BucketData" ],
      "Properties": {
        "Description": "Create dirs into this S3 Bucket",
        "FunctionName": "testCF_S3CreateBucketDirs",
        "Handler": "index.lambda_handler",
        "Role": { "Fn::GetAtt" : ["IAMRoleBasicLambda", "Arn"] },
        "Timeout": 360,
        "Runtime": "python3.7",

        "Code": {
          "ZipFile": { "Fn::Join" : ["\n", [
            "import boto3",
            "import cfnresponse",
            "def lambda_handler(event, context):",

            "   the_event = event['RequestType']",
            "   print(\"The event is: \", str(the_event))",
            "   response_data = {}",
            "   s3 = boto3.client('s3')",
            "   print( event )",

            "   the_bucket = event['ResourceProperties']['the_bucket']",
            "   dirs = event['ResourceProperties']['dirs_to_create']",       
            "   dirs_to_create = dirs.split( \",\" )",       
            
            "   try:",
            
            "       if the_event in ( 'Create', 'Update' ):",
            "           for dir_name in dirs_to_create:",
            "               print(\"Creating: \", str(dir_name))",
            "               s3.put_object( Bucket = the_bucket, Key = ( dir_name + '/' ) )",
            
            "       elif the_event == 'Delete':",
            "           print( \"Deleting S3 Content...\" )",
            "           botoResourse = boto3.resource('s3')",
            "           botoResourse.Bucket(str(the_bucket)).objects.all().delete()",
            "           print(\"Deleting Bucket data: \" )",

            "       cfnresponse.send(event,context,cfnresponse.SUCCESS,response_data)",

            "   except Exception as e:",
            "       print(\"Execution failed...\")",
            "       print(str(e))",
            "       response_data['Data'] = str(e)",
            "       cfnresponse.send(event,context,cfnresponse.FAILED,response_data)"
          ]]}
        }
      }
    },


    "CloudFrontOriginAccessIdentity": {
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
      "Properties": {
        "CloudFrontOriginAccessIdentityConfig": {
          "Comment": "Bid Machine Origin Identity"
        }
      }
    },

    "CloudFrontDistribution": {
      "Type": "AWS::CloudFront::Distribution",
      "DependsOn": "CloudFrontOriginAccessIdentity",

      "Properties": {
        "DistributionConfig": {

          "Origins": [ {
            "DomainName": { "Fn::Sub": "${BucketWebApplication}.s3.amazonaws.com" },
            "Id": { "Fn::Sub": "S3-${BucketWebApplication}" }, 
            "S3OriginConfig": {
              "OriginAccessIdentity" : { 
                "Fn::Sub": "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
              }
            }
          }],
          
          "Enabled": "true",
          "DefaultRootObject": "index.html",
          "DefaultCacheBehavior": {
            
            "AllowedMethods": [ "GET", "HEAD"],
            "TargetOriginId": { "Fn::Sub": "S3-${BucketWebApplication}" },
            "ForwardedValues": {
              "QueryString": "false",
              "Cookies": { "Forward": "none" }
            },
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "ViewerCertificate": {
            "CloudFrontDefaultCertificate": "true"
          }

        }
      }
    },

    "CognitoUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "BidMachine",
        "AliasAttributes": [ "email" ],
        "AutoVerifiedAttributes": [ "email" ]
      }
    },

    "CognitoUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "DependsOn": "CognitoUserPool",
      "Properties": {
        "ClientName" : "BidMachineApp",
        "UserPoolId": { "Ref": "CognitoUserPool" },
        "GenerateSecret": false
      }
    },


    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
     
      "Properties": {
        "TableName": { "Ref": "DynamoDBTableName" },
        "AttributeDefinitions": [
          {
            "AttributeName": "ItemId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName" : "ItemId",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      }
    },



    "APIGatewayRestAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "BidMachineAPI2",
        "Description": "This API was created to attend BidMachine calls",
        "EndpointConfiguration":{
          "Types": [ "REGIONAL" ]
        },
        "BinaryMediaTypes": [ "multipart/form-data", "text/xml" ]
      }
    },

    "APIGatewayResourceFileUploadApi": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [ "APIGatewayRestAPI", "LambdaUploadXMLS3" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ParentId": { "Fn::GetAtt": ["APIGatewayRestAPI", "RootResourceId"] },
        "PathPart": "fileuploadapi"
      }
    },

    "APIGatewayResourceDefaultUserSettings": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [ "APIGatewayResourceFileUploadApi", "LambdaLoadUserDefaultWords" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ParentId": { "Fn::GetAtt": ["APIGatewayRestAPI", "RootResourceId"] },
        "PathPart": "defaultUserSettings"
      }
    },

    "APIGatewayResourceWordsAPI": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [ "APIGatewayResourceDefaultUserSettings", "LambdaCrudWordDynamo" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ParentId": { "Fn::GetAtt": ["APIGatewayRestAPI", "RootResourceId"] },
        "PathPart": "wordsapi"
      }
    },

    "APIGatewayCognitoAuthorizer": {
      "Type" : "AWS::ApiGateway::Authorizer",
      "DependsOn": [ "CognitoUserPool", "APIGatewayResourceFileUploadApi" ],
      "Properties": {
        "Type": "COGNITO_USER_POOLS",
        "Name": "testAPICognitoAuth",
        "IdentitySource": "method.request.header.Authorization",
        "ProviderARNs": [ { "Fn::GetAtt": ["CognitoUserPool", "Arn"] }],
        "RestApiId": { "Ref": "APIGatewayRestAPI" }
      }
    },



    "APIGatewayMethodPostFileUpdateAPI": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayCognitoAuthorizer", "APIGatewayResourceWordsAPI" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResourceFileUploadApi" },
        "HttpMethod": "POST",
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": { "Ref": "APIGatewayCognitoAuthorizer" },
        
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationResponses": [ 
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }            
            } 
          ],
          "IntegrationHttpMethod": "POST",
        
          "Uri": {"Fn::Join" : ["", 
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaUploadXMLS3", "Arn"]}, "/invocations"]
          ]}
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": { "application/json": "Empty", "text/xml": "Empty" }
          }
        ]

      }
    },

    "APIGatewayMethodPostDefaultUserSettings": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayMethodPostFileUpdateAPI", "APIGatewayResourceDefaultUserSettings" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResourceDefaultUserSettings" },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationResponses": [ 
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }            
            } 
          ],
          "IntegrationHttpMethod": "POST",
        
          "Uri": {"Fn::Join" : ["", 
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaLoadUserDefaultWords", "Arn"]}, "/invocations"]
          ]}
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]

      }
    },


    "APIGatewayMethodPOSTWordsAPI": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayMethodPostDefaultUserSettings", "APIGatewayResourceWordsAPI" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResourceWordsAPI" },
        "HttpMethod": "POST",
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": { "Ref": "APIGatewayCognitoAuthorizer" },
        
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationResponses": [ 
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }            
            } 
          ],
          "IntegrationHttpMethod": "POST",
        
          "Uri": {"Fn::Join" : ["", 
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaCrudWordDynamo", "Arn"]}, "/invocations"]
          ]}
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]

      }
    },

    "APIGatewayMethodDELETEWordsAPI": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayMethodPOSTWordsAPI" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResourceWordsAPI" },
        "HttpMethod": "DELETE",
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": { "Ref": "APIGatewayCognitoAuthorizer" },
        
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationResponses": [ 
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }            
            } 
          ],
          "IntegrationHttpMethod": "POST",
        
          "Uri": {"Fn::Join" : ["", 
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaCrudWordDynamo", "Arn"]}, "/invocations"]
          ]}
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]

      }
    },

    "APIGatewayMethodGETWordsAPI": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayMethodDELETEWordsAPI" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResourceWordsAPI" },
        "HttpMethod": "GET",
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": { "Ref": "APIGatewayCognitoAuthorizer" },
        
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationResponses": [ 
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }            
            } 
          ],
          "IntegrationHttpMethod": "POST",
        
          "Uri": {"Fn::Join" : ["", 
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaCrudWordDynamo", "Arn"]}, "/invocations"]
          ]}
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]

      }
    },

    "APIGatewayMethodPUTWordsAPI": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayMethodGETWordsAPI" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResourceWordsAPI" },
        "HttpMethod": "PUT",
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": { "Ref": "APIGatewayCognitoAuthorizer" },
        
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationResponses": [ 
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'PUT,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }            
            } 
          ],
          "IntegrationHttpMethod": "POST",
        
          "Uri": {"Fn::Join" : ["", 
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaCrudWordDynamo", "Arn"]}, "/invocations"]
          ]}
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]

      }
    },



    "APIGatewayOptionsFileUploadAPI": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayMethodPostFileUpdateAPI" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResourceFileUploadApi" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              },
              "StatusCode": "200"
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": "200"
          }
        ]
      }
    },

    "APIGatewayOptionsDefaultUserSettings": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayMethodPostDefaultUserSettings", "APIGatewayOptionsFileUploadAPI" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResourceDefaultUserSettings" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              },
              "StatusCode": "200"
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": "200"
          }
        ]
      }
    },

    "APIGatewayOptionsWordsAPI": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [ "APIGatewayMethodPUTWordsAPI" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "ResourceId": { "Ref": "APIGatewayResourceWordsAPI" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              },
              "StatusCode": "200"
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": "200"
          }
        ]
      }
    },



    "APIGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [ "APIGatewayOptionsFileUploadAPI", "APIGatewayOptionsDefaultUserSettings", "APIGatewayOptionsWordsAPI" ],
      "Properties": {
        "RestApiId": { "Ref": "APIGatewayRestAPI" },
        "StageName": "prod"
      }
    },

    "APIGatewayLambdaPermissionUploadXMLS3": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [ "APIGatewayDeployment" ],
      "Properties": {
        "Action": "lambda:invokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": { "Fn::GetAtt" : [ "LambdaUploadXMLS3", "Arn"] },
        "SourceArn": {"Fn::Join": ["", 
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "APIGatewayRestAPI"}, "/*"]
        ]}
      }
    },

    "APIGatewayLambdaPermissionLoadUserDefaultWords": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [ "APIGatewayDeployment" ],
      "Properties": {
        "Action": "lambda:invokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": { "Fn::GetAtt" : [ "LambdaLoadUserDefaultWords", "Arn"] },
        "SourceArn": {"Fn::Join": ["", 
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "APIGatewayRestAPI"}, "/*"]
        ]}
      }
    },

    "APIGatewayLambdaPermissionCrudWordDynamo": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [ "APIGatewayDeployment" ],
      "Properties": {
        "Action": "lambda:invokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": { "Fn::GetAtt" : [ "LambdaCrudWordDynamo", "Arn"] },
        "SourceArn": {"Fn::Join": ["", 
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "APIGatewayRestAPI"}, "/*"]
        ]}
      }
    },



    "IAMRoleBasicLambda": {
      "Type": "AWS::IAM::Role",
      "Properties": {

        "RoleName": "BidMachineBasicLambdaRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },

    "IAMRoleLambdaDestinations": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DependsOn": [ "LambdaXMLToJSON", "LambdaRefineData" ],
      "Properties": {
        
        "ManagedPolicyName": "LambdaDestination",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "lambda:InvokeFunction",
              "Resource": [
                { "Fn::GetAtt": [ "LambdaUploadDictToS3", "Arn" ] },
                { "Fn::GetAtt": [ "LambdaFindSelectData", "Arn" ] }
              ]
            }
          ]
        },
        "Roles": [ { "Ref": "IAMRoleBasicLambda" } ]
      }
    },

    "IAMRoleLambdaFindSelectData": {
      "Type": "AWS::IAM::Role",
      "Properties": {

        "RoleName": "BidMachineFindSelectDataLambdaRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSESFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],

        "Policies": [
          {
            "PolicyName": "ScanDataDynamoDB",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query"
                ],
                  "Resource": { "Fn::GetAtt": [ "DynamoDBTable", "Arn" ] }
                }

              ]
            }
          }
        ]
      }
    },

    "IAMRoleLoadUserDefaultWords": {
      "Type": "AWS::IAM::Role",
      "DependsOn": [ "DynamoDBTable" ],
      "Properties": {

        "RoleName": "LambdaUserDefaultWordsDynamoDb",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],

        "Policies": [
          {
            "PolicyName": "DynamoDBWriteAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                
                {
                  "Effect": "Allow",
                  "Action": [ "dynamodb:PutItem" ],
                  "Resource": { "Fn::GetAtt": [ "DynamoDBTable", "Arn" ] }
                }

              ]
            }
          }
        ]
      }
    },

    "IAMRoleCrudDynamo": {
      "Type": "AWS::IAM::Role",
      "Properties": {

        "RoleName": "BidMachineCRUDWordsAPIDynamoLambdaRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AmazonSESFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },



    "LambdaUpdateCognitoConfigS3CustomResources": {
      "Type": "Custom::S3CustomResource",
      "DependsOn": [ "S3BucketWebApplication", "CognitoUserPoolClient", "APIGatewayRestAPI" ],
      "Properties": { 
        "ServiceToken": { "Fn::GetAtt" : [ "LambdaUpdateCognitoConfigS3", "Arn"] },
        "UserPool": { "Ref": "CognitoUserPool" },
        "Client": { "Ref": "CognitoUserPoolClient" },
        "Region": { "Ref": "AWS::Region" },
        "Bucket": { "Ref": "BucketWebApplication" },
        "invokeUrl": { "Fn::Sub": "https://${APIGatewayRestAPI}.execute-api.${AWS::Region}.amazonaws.com/prod" },
        "filePath": "js/config.js"
      }
    },

    "LambdaUpdateCognitoConfigS3": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleBasicLambda", "APIGatewayDeployment" ],
      "Properties": {

        "Description": "Update config.js file from web application bucket",
        "FunctionName": "UpdateConfigS3WebFile_test",
        "Handler": "index.lambda_handler",
        "Role": { "Fn::GetAtt" : ["IAMRoleBasicLambda", "Arn"] },
        "Timeout": 120,
        "Runtime": "python3.7",

        "Code": {
          "ZipFile": { "Fn::Join" : ["\n", [
            
            "import boto3",
            "import cfnresponse",
            "import json\n",

            "s3 = boto3.resource('s3')\n",

            "def create( properties, physical_id ):\n",
            "   userPoolId = properties['UserPool']",
            "   clientId = properties['Client']",
            "   region = properties['Region']",
            "   bucket = properties['Bucket']",
            "   invokeUrl = properties['invokeUrl']",
            "   filePath = properties['filePath']\n",

            "   config_content = \"\"\" window._config = { cognito: { userPoolId: '%s', userPoolClientId: '%s', region: '%s' }, api: { invokeUrl: '%s' } } \"\"\" ",
            "   config_content = config_content % (userPoolId, clientId, region, invokeUrl)",
            "   config = s3.Object(bucket,f'{filePath}')",
            "   config.put(Body=config_content)\n",
            "   return cfnresponse.SUCCESS, None\n",

            "def update( properties, physical_id ):",
            "   return create(properties, physical_id)\n",

            "def delete( properties, physical_id ):",
            "   return cfnresponse.SUCCESS, physical_id\n",

            "def lambda_handler(event, context):\n",

            "   print(\"UpdateConfigS3WebFile\")",
            "   print(event)",
            "   status = cfnresponse.FAILED",       
            "   new_physical_id = None\n",              

            "   try:\n",
            
            "       properties = event.get('ResourceProperties')",
            "       physical_id = event.get('PhysicalResourceId')",
            "       status, new_physical_id = { ",
            "           'Create': create,",
            "           'Update': update,",
            "           'Delete': delete,",
            "       }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)\n",
            
            "   except Exception as e:",
            "       print(\"Execution failed...\")",
            "       print(str(e))",
            "       status = cfnresponse.FAILED",
            "       cfnresponse.send(event, context, status, {}, new_physical_id)\n",
            "   finally:",
            "       cfnresponse.send(event, context, status, {}, new_physical_id)"
          ]]}
        }

      }
    },



    "LambdaLayerRequests": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [ "python3.7" ],
        "Content": {
          "S3Bucket": { "Ref": "BucketLambdaCode" },
          "S3Key": "lambda_layer/requests_lambda_layer.zip"
        }
      }
    },

    "LambdaLayerDataWrangler": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [ "python3.7" ],
        "Content": {
          "S3Bucket": { "Ref": "BucketLambdaCode" },
          "S3Key": "lambda_layer/aws_data_wrangler_lambda_layer.zip"
        }
      }
    },

    "LambdaLayerXMLToDict": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [ "python3.7" ],
        "Content": {
          "S3Bucket": { "Ref": "BucketLambdaCode" },
          "S3Key": "lambda_layer/xml_to_dict_layer.zip"
        }
      }
    },



    "LambdaCrudWordDynamo": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleCrudDynamo", "LambdaLayerRequests" ],
      "Properties": {

        "Code": {
          "S3Bucket" : { "Ref": "BucketLambdaCode" },
          "S3Key": "lambda_code/crud_word_dynamo.zip"
        },
        
        "FunctionName": "testCF_crud_word_dynamo",
        "Description": "Lambda to load user default configurations",
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": 128,
        "Runtime": "python3.7",
        "Role": { "Fn::GetAtt" : ["IAMRoleCrudDynamo", "Arn"] },

        "Layers": [ { "Ref": "LambdaLayerRequests" } ],

        "Environment": {
          "Variables": {
            "dynamoDbTable" : { "Ref": "DynamoDBTableName" }
          }
        }
      }
    },

    "LambdaLoadUserDefaultWords": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleLoadUserDefaultWords", "LambdaLayerRequests" ],
      "Properties": {

        "Code": {
          "S3Bucket" : { "Ref": "BucketLambdaCode" },
          "S3Key": "lambda_code/loadUserDefaultWords.zip"
        },
        
        "FunctionName": "testCF_loadUserDefaultWords",
        "Description": "Lambda to load user default configurations",
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": 128,
        "Runtime": "python3.7",
        "Role": { "Fn::GetAtt" : ["IAMRoleLoadUserDefaultWords", "Arn"] },

        "Layers": [ { "Ref": "LambdaLayerRequests" } ],

        "Environment": {
          "Variables": {
            "dynamoDbTable" : { "Ref": "DynamoDBTableName" }
          }
        }
      }
    },

    "LambdaUploadXMLS3" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleBasicLambda", "LambdaLayerRequests" ],
      "Properties": {

        "Code": {
          "S3Bucket" : { "Ref": "BucketLambdaCode" },
          "S3Key": "lambda_code/upload_xml_s3.zip"
        },
        
        "FunctionName": "testCF_upload_xml_s3",
        "Description": "Lambda to upload XML to S3",
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": 128,
        "Runtime": "python3.7",
        "Role": { "Fn::GetAtt" : ["IAMRoleBasicLambda", "Arn"] },

        "Layers": [ { "Ref": "LambdaLayerRequests" } ],
        "Environment": {
          "Variables": {
            "bucketData" : { "Ref": "BucketData" }
          }
        }
      }
      
    },

    "LambdaXMLToJSON" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleBasicLambda", "LambdaLayerRequests", "LambdaLayerXMLToDict" ],
      "Properties": {

        "Code": {
          "S3Bucket" : { "Ref": "BucketLambdaCode" },
          "S3Key": { "Fn::Sub": "lambda_code/xml_dict.zip" }
        },
        
        "FunctionName": "testCF_xmlToDict",
        "Description": "Lambda to convert XML to JSON",
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": 128,
        "Timeout": 10,
        "PackageType": "Zip",
        "Runtime": "python3.7",
        "Role": { "Fn::GetAtt" : ["IAMRoleBasicLambda", "Arn"] },
        "Layers": [ { "Ref": "LambdaLayerRequests" }, { "Ref": "LambdaLayerXMLToDict" } ]
      }
      
    },

    "LambdaUploadDictToS3": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleBasicLambda", "LambdaLayerRequests" ],
      "Properties": {
        "Code": {
          "S3Bucket" : { "Ref": "BucketLambdaCode" },
          "S3Key": { "Fn::Sub": "lambda_code/upload_dict_s3.zip" }
        },
        
        "FunctionName": "testCF_upload_dict_s3",
        "Description": "Lambda to upload converted XML to JSON into S3 bucket",
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": 128,
        "Timeout": 10,
        "PackageType": "Zip",
        "Runtime": "python3.7",
        "Role": { "Fn::GetAtt" : ["IAMRoleBasicLambda", "Arn"] },
        "Layers": [ { "Ref": "LambdaLayerRequests" } ]
      }
    },

    "LambdaXMLToJSONDestination": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "DependsOn": "IAMRoleLambdaDestinations",
      "Properties": {
        "DestinationConfig": {
          "OnSuccess": {
            "Destination": { "Fn::GetAtt" : [ "LambdaUploadDictToS3", "Arn" ] }
          }
        },
    
        "FunctionName": { "Ref": "LambdaXMLToJSON" },
        "MaximumRetryAttempts": 1,
        "Qualifier": "$LATEST"
      }
    },

    "LambdaRefineData" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleBasicLambda", "LambdaLayerRequests", "LambdaLayerDataWrangler" ],
      "Properties": {

        "Code": {
          "S3Bucket" : { "Ref": "BucketLambdaCode" },
          "S3Key": { "Fn::Sub": "lambda_code/refineData.zip" }
        },
        
        "FunctionName": "testCF_refineData",
        "Description": "Lambda to manipulate data as dataframe from JSON",
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": 128,
        "Timeout": 10,
        "PackageType": "Zip",
        "Runtime": "python3.7",
        "Role": { "Fn::GetAtt" : ["IAMRoleBasicLambda", "Arn"] },
        "Layers": [ { "Ref": "LambdaLayerRequests" }, { "Ref": "LambdaLayerDataWrangler" } ]
      }
    },

    "LambdaFindSelectData" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [ "IAMRoleLambdaFindSelectData", "LambdaLayerRequests", "LambdaLayerDataWrangler" ],
      "Properties": {
        "Code": {
          "S3Bucket" : { "Ref": "BucketLambdaCode" },
          "S3Key": { "Fn::Sub": "lambda_code/findSelectData.zip" }
        },
        
        "FunctionName": "testCF_findSelectData",
        "Description": "Lambda to match user data with the JSON",
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": 128,
        "Timeout": 10,
        "PackageType": "Zip",
        "Runtime": "python3.7",
        "Role": { "Fn::GetAtt" : ["IAMRoleLambdaFindSelectData", "Arn"] },
        "Layers": [ { "Ref": "LambdaLayerRequests" }, { "Ref": "LambdaLayerDataWrangler" } ],

        "Environment": {
          "Variables": {
            "dynamoDbTable" : { "Ref": "DynamoDBTableName" }
          }
        }
      }
    },

    "LambdaRefineDataDestination": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "DependsOn": "IAMRoleLambdaDestinations",
      "Properties": {
        "DestinationConfig": {
          "OnSuccess": {
            "Destination": { "Fn::GetAtt" : [ "LambdaFindSelectData", "Arn" ] }
          }
        },
    
        "FunctionName": { "Ref": "LambdaRefineData" },
        "MaximumRetryAttempts": 1,
        "Qualifier": "$LATEST"
      }
    }

  }

}